### YamlMime:ManagedReference
items:
- uid: Uvendia.Domain.Repositories.Products
  commentId: T:Uvendia.Domain.Repositories.Products
  id: Products
  parent: Uvendia.Domain.Repositories
  children:
  - Uvendia.Domain.Repositories.Products.All(System.String,System.String,System.Int32,System.Object)
  - Uvendia.Domain.Repositories.Products.All``1(``0[])
  - Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists(System.String,System.String,System.Nullable{System.Int64})
  - Uvendia.Domain.Repositories.Products.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  - Uvendia.Domain.Repositories.Products.Delete(Uvendia.Domain.Product)
  - Uvendia.Domain.Repositories.Products.DeleteById``1(``0)
  - Uvendia.Domain.Repositories.Products.GetNewestProducts(System.Int32,System.Nullable{System.Boolean})
  - Uvendia.Domain.Repositories.Products.GetParentProduct(System.String)
  - Uvendia.Domain.Repositories.Products.GetProductsPaged(System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},Uvendia.Domain.Enums.ProductSortyBy)
  - Uvendia.Domain.Repositories.Products.GetRandomProducts(System.Int32,System.Nullable{System.Boolean})
  - Uvendia.Domain.Repositories.Products.GetTopInterestingProducts(System.Int32,System.Int64[],System.Int64[],System.Nullable{System.Boolean})
  - Uvendia.Domain.Repositories.Products.GetTopRatedProducts(System.Int32,System.Nullable{System.Boolean})
  - Uvendia.Domain.Repositories.Products.GetTotalSoldItems(System.Int64[],Uvendia.Domain.Enums.OrderStatus[])
  - Uvendia.Domain.Repositories.Products.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  - Uvendia.Domain.Repositories.Products.Save(Uvendia.Domain.Product)
  - Uvendia.Domain.Repositories.Products.Search(Uvendia.Domain.Entities.ProductSearch,System.Boolean)
  - Uvendia.Domain.Repositories.Products.Single(System.String,System.Object)
  - Uvendia.Domain.Repositories.Products.Single``1(``0)
  langs:
  - csharp
  - vb
  name: Products
  nameWithType: Products
  fullName: Uvendia.Domain.Repositories.Products
  type: Class
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Products
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 18
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  example: []
  syntax:
    content: 'public class Products : UvendiaRepository<Product>, IBaseRepository<Product>'
    content.vb: >-
      Public Class Products
          Inherits UvendiaRepository(Of Product)
          Implements IBaseRepository(Of Product)
  inheritance:
  - System.Object
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  implements:
  - Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Product}
  inheritedMembers:
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.CreateUnitOfWork
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._syncLock
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._connectionStringName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Instance``1
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.CreateConnection
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.SetConnection(System.Data.SqlClient.SqlConnection)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1({IID})
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Insert``1(Uvendia.Domain.Product)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Update(Uvendia.Domain.Product)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Count(System.String,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Uvendia.Domain.Repositories.Products.Single``1(``0)
  commentId: M:Uvendia.Domain.Repositories.Products.Single``1(``0)
  id: Single``1(``0)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Single<I>(I)
  nameWithType: Products.Single<I>(I)
  fullName: Uvendia.Domain.Repositories.Products.Single<I>(I)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Single
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 21
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  example: []
  syntax:
    content: public override Product Single<I>(I id)
    parameters:
    - id: id
      type: '{I}'
    typeParameters:
    - id: I
    return:
      type: Uvendia.Domain.Product
    content.vb: Public Overrides Function Single(Of I)(id As I) As Product
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1({I})
  overload: Uvendia.Domain.Repositories.Products.Single*
  nameWithType.vb: Products.Single(Of I)(I)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Products.Single(Of I)(I)
  name.vb: Single(Of I)(I)
- uid: Uvendia.Domain.Repositories.Products.Single(System.String,System.Object)
  commentId: M:Uvendia.Domain.Repositories.Products.Single(System.String,System.Object)
  id: Single(System.String,System.Object)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Single(String, Object)
  nameWithType: Products.Single(String, Object)
  fullName: Uvendia.Domain.Repositories.Products.Single(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Single
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 52
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns single product filtered by a SQL where clause.\nThese query aliases you can use in your &apos;where&apos; clause:\n[Product] p\n[Price] price\n[PriceDefinition] priceDef\n[Definition] d\n[Property] prop\n[PropertyValue] pv      \n[ProductToTranslation] ptt\n[Translation] t\n\neq. where p.Published = 1\n"
  remarks: "\n"
  example: []
  syntax:
    content: public override Product Single(string where = null, object parms = null)
    parameters:
    - id: where
      type: System.String
      description: The where.
    - id: parms
      type: System.Object
      description: The parms.
    return:
      type: Uvendia.Domain.Product
      description: ''
    content.vb: Public Overrides Function Single(where As String = Nothing, parms As Object = Nothing) As Product
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single(System.String,System.Object)
  overload: Uvendia.Domain.Repositories.Products.Single*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Products.GetParentProduct(System.String)
  commentId: M:Uvendia.Domain.Repositories.Products.GetParentProduct(System.String)
  id: GetParentProduct(System.String)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetParentProduct(String)
  nameWithType: Products.GetParentProduct(String)
  fullName: Uvendia.Domain.Repositories.Products.GetParentProduct(System.String)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetParentProduct
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 64
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public Product GetParentProduct(string sku)
    parameters:
    - id: sku
      type: System.String
    return:
      type: Uvendia.Domain.Product
    content.vb: Public Function GetParentProduct(sku As String) As Product
  overload: Uvendia.Domain.Repositories.Products.GetParentProduct*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Uvendia.Domain.Repositories.Products.All``1(``0[])
  commentId: M:Uvendia.Domain.Repositories.Products.All``1(``0[])
  id: All``1(``0[])
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: All<TType>(TType[])
  nameWithType: Products.All<TType>(TType[])
  fullName: Uvendia.Domain.Repositories.Products.All<TType>(TType[])
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: All
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 82
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns all the entities specified by the given identifiers\n"
  example: []
  syntax:
    content: public override IEnumerable<Product> All<TType>(params TType[] ids)
    parameters:
    - id: ids
      type: '{TType}[]'
      description: The ids.
    typeParameters:
    - id: TType
      description: The type of the type.
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
      description: ''
    content.vb: Public Overrides Function All(Of TType)(ParamArray ids As TType()) As IEnumerable(Of Product)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All``1({TType}[])
  overload: Uvendia.Domain.Repositories.Products.All*
  nameWithType.vb: Products.All(Of TType)(TType())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Products.All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
- uid: Uvendia.Domain.Repositories.Products.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Uvendia.Domain.Repositories.Products.All(System.String,System.String,System.Int32,System.Object)
  id: All(System.String,System.String,System.Int32,System.Object)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: All(String, String, Int32, Object)
  nameWithType: Products.All(String, String, Int32, Object)
  fullName: Uvendia.Domain.Repositories.Products.All(System.String, System.String, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: All
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 114
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns all the products filtered by a SQL where clause.\nThese query aliases you can use in your &apos;where&apos; clause:\n[Product] p\n[Price] price\n[PriceDefinition] priceDef\n[Definition] d\n[Property] prop\n[PropertyValue] pv    \n[ProductToTranslation] ptt\n[Translation] t\n\neq. where p.Published = 1\n"
  remarks: "\n"
  example: []
  syntax:
    content: public override IEnumerable<Product> All(string where = null, string orderBy = null, int top = 0, object parms = null)
    parameters:
    - id: where
      type: System.String
      description: The where.
    - id: orderBy
      type: System.String
      description: The order by.
    - id: top
      type: System.Int32
      description: The top.
    - id: parms
      type: System.Object
      description: The parms.
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
      description: ''
    content.vb: Public Overrides Function All(where As String = Nothing, orderBy As String = Nothing, top As Integer = 0, parms As Object = Nothing) As IEnumerable(Of Product)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All(System.String,System.String,System.Int32,System.Object)
  overload: Uvendia.Domain.Repositories.Products.All*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Products.GetProductsPaged(System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},Uvendia.Domain.Enums.ProductSortyBy)
  commentId: M:Uvendia.Domain.Repositories.Products.GetProductsPaged(System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},Uvendia.Domain.Enums.ProductSortyBy)
  id: GetProductsPaged(System.Int32,System.Int32,System.Int32@,System.Nullable{System.Int64},System.Nullable{System.Boolean},System.Nullable{System.Int64},Uvendia.Domain.Enums.ProductSortyBy)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetProductsPaged(Int32, Int32, out Int32, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>, ProductSortyBy)
  nameWithType: Products.GetProductsPaged(Int32, Int32, out Int32, Nullable<Int64>, Nullable<Boolean>, Nullable<Int64>, ProductSortyBy)
  fullName: Uvendia.Domain.Repositories.Products.GetProductsPaged(System.Int32, System.Int32, out System.Int32, System.Nullable<System.Int64>, System.Nullable<System.Boolean>, System.Nullable<System.Int64>, Uvendia.Domain.Enums.ProductSortyBy)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetProductsPaged
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 160
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nGets the products paged.\n"
  example: []
  syntax:
    content: public List<Product> GetProductsPaged(int pageIndex, int pageSize, out int totalRows, long? categoryId = default(long? ), bool? published = default(bool? ), long? priceDefinitionId = default(long? ), ProductSortyBy sortyBy = ProductSortyBy.Oldest)
    parameters:
    - id: pageIndex
      type: System.Int32
      description: Index of the page.
    - id: pageSize
      type: System.Int32
      description: Size of the page.
    - id: totalRows
      type: System.Int32
      description: The total rows.
    - id: categoryId
      type: System.Nullable{System.Int64}
      description: The category identifier.
    - id: published
      type: System.Nullable{System.Boolean}
      description: The published.
    - id: priceDefinitionId
      type: System.Nullable{System.Int64}
      description: The price definition identifier.
    - id: sortyBy
      type: Uvendia.Domain.Enums.ProductSortyBy
      description: The sorty by.
    return:
      type: System.Collections.Generic.List{Uvendia.Domain.Product}
      description: ''
    content.vb: Public Function GetProductsPaged(pageIndex As Integer, pageSize As Integer, ByRef totalRows As Integer, categoryId As Long? = Nothing, published As Boolean? = Nothing, priceDefinitionId As Long? = Nothing, sortyBy As ProductSortyBy = ProductSortyBy.Oldest) As List(Of Product)
  overload: Uvendia.Domain.Repositories.Products.GetProductsPaged*
  nameWithType.vb: Products.GetProductsPaged(Int32, Int32, ByRef Int32, Nullable(Of Int64), Nullable(Of Boolean), Nullable(Of Int64), ProductSortyBy)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetProductsPaged(System.Int32, System.Int32, ByRef System.Int32, System.Nullable(Of System.Int64), System.Nullable(Of System.Boolean), System.Nullable(Of System.Int64), Uvendia.Domain.Enums.ProductSortyBy)
  name.vb: GetProductsPaged(Int32, Int32, ByRef Int32, Nullable(Of Int64), Nullable(Of Boolean), Nullable(Of Int64), ProductSortyBy)
- uid: Uvendia.Domain.Repositories.Products.GetTotalSoldItems(System.Int64[],Uvendia.Domain.Enums.OrderStatus[])
  commentId: M:Uvendia.Domain.Repositories.Products.GetTotalSoldItems(System.Int64[],Uvendia.Domain.Enums.OrderStatus[])
  id: GetTotalSoldItems(System.Int64[],Uvendia.Domain.Enums.OrderStatus[])
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetTotalSoldItems(Int64[], OrderStatus[])
  nameWithType: Products.GetTotalSoldItems(Int64[], OrderStatus[])
  fullName: Uvendia.Domain.Repositories.Products.GetTotalSoldItems(System.Int64[], Uvendia.Domain.Enums.OrderStatus[])
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetTotalSoldItems
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 189
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nGets the total sold items.\n"
  example: []
  syntax:
    content: public List<ProductStockIndicationDataTransferObject> GetTotalSoldItems(long[] productIds, params OrderStatus[] orderStatus)
    parameters:
    - id: productIds
      type: System.Int64[]
      description: The product identifier.
    - id: orderStatus
      type: Uvendia.Domain.Enums.OrderStatus[]
      description: The order status.
    return:
      type: System.Collections.Generic.List{Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject}
      description: ''
    content.vb: Public Function GetTotalSoldItems(productIds As Long(), ParamArray orderStatus As OrderStatus()) As List(Of ProductStockIndicationDataTransferObject)
  overload: Uvendia.Domain.Repositories.Products.GetTotalSoldItems*
  nameWithType.vb: Products.GetTotalSoldItems(Int64(), OrderStatus())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetTotalSoldItems(System.Int64(), Uvendia.Domain.Enums.OrderStatus())
  name.vb: GetTotalSoldItems(Int64(), OrderStatus())
- uid: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts(System.Int32,System.Int64[],System.Int64[],System.Nullable{System.Boolean})
  commentId: M:Uvendia.Domain.Repositories.Products.GetTopInterestingProducts(System.Int32,System.Int64[],System.Int64[],System.Nullable{System.Boolean})
  id: GetTopInterestingProducts(System.Int32,System.Int64[],System.Int64[],System.Nullable{System.Boolean})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetTopInterestingProducts(Int32, Int64[], Int64[], Nullable<Boolean>)
  nameWithType: Products.GetTopInterestingProducts(Int32, Int64[], Int64[], Nullable<Boolean>)
  fullName: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts(System.Int32, System.Int64[], System.Int64[], System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetTopInterestingProducts
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 223
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public IEnumerable<Product> GetTopInterestingProducts(int take = 3, long[] categoryIds = null, long[] currentCartProductIds = null, bool? published)
    parameters:
    - id: take
      type: System.Int32
    - id: categoryIds
      type: System.Int64[]
    - id: currentCartProductIds
      type: System.Int64[]
    - id: published
      type: System.Nullable{System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Function GetTopInterestingProducts(take As Integer = 3, categoryIds As Long() = Nothing, currentCartProductIds As Long() = Nothing, published As Boolean?) As IEnumerable(Of Product)
  overload: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts*
  nameWithType.vb: Products.GetTopInterestingProducts(Int32, Int64(), Int64(), Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts(System.Int32, System.Int64(), System.Int64(), System.Nullable(Of System.Boolean))
  name.vb: GetTopInterestingProducts(Int32, Int64(), Int64(), Nullable(Of Boolean))
- uid: Uvendia.Domain.Repositories.Products.GetTopRatedProducts(System.Int32,System.Nullable{System.Boolean})
  commentId: M:Uvendia.Domain.Repositories.Products.GetTopRatedProducts(System.Int32,System.Nullable{System.Boolean})
  id: GetTopRatedProducts(System.Int32,System.Nullable{System.Boolean})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetTopRatedProducts(Int32, Nullable<Boolean>)
  nameWithType: Products.GetTopRatedProducts(Int32, Nullable<Boolean>)
  fullName: Uvendia.Domain.Repositories.Products.GetTopRatedProducts(System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetTopRatedProducts
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 240
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public IEnumerable<Product> GetTopRatedProducts(int take = 3, bool? published)
    parameters:
    - id: take
      type: System.Int32
    - id: published
      type: System.Nullable{System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Function GetTopRatedProducts(take As Integer = 3, published As Boolean?) As IEnumerable(Of Product)
  overload: Uvendia.Domain.Repositories.Products.GetTopRatedProducts*
  nameWithType.vb: Products.GetTopRatedProducts(Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetTopRatedProducts(System.Int32, System.Nullable(Of System.Boolean))
  name.vb: GetTopRatedProducts(Int32, Nullable(Of Boolean))
- uid: Uvendia.Domain.Repositories.Products.GetRandomProducts(System.Int32,System.Nullable{System.Boolean})
  commentId: M:Uvendia.Domain.Repositories.Products.GetRandomProducts(System.Int32,System.Nullable{System.Boolean})
  id: GetRandomProducts(System.Int32,System.Nullable{System.Boolean})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetRandomProducts(Int32, Nullable<Boolean>)
  nameWithType: Products.GetRandomProducts(Int32, Nullable<Boolean>)
  fullName: Uvendia.Domain.Repositories.Products.GetRandomProducts(System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetRandomProducts
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 255
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public IEnumerable<Product> GetRandomProducts(int take = 3, bool? published)
    parameters:
    - id: take
      type: System.Int32
    - id: published
      type: System.Nullable{System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Function GetRandomProducts(take As Integer = 3, published As Boolean?) As IEnumerable(Of Product)
  overload: Uvendia.Domain.Repositories.Products.GetRandomProducts*
  nameWithType.vb: Products.GetRandomProducts(Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetRandomProducts(System.Int32, System.Nullable(Of System.Boolean))
  name.vb: GetRandomProducts(Int32, Nullable(Of Boolean))
- uid: Uvendia.Domain.Repositories.Products.GetNewestProducts(System.Int32,System.Nullable{System.Boolean})
  commentId: M:Uvendia.Domain.Repositories.Products.GetNewestProducts(System.Int32,System.Nullable{System.Boolean})
  id: GetNewestProducts(System.Int32,System.Nullable{System.Boolean})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: GetNewestProducts(Int32, Nullable<Boolean>)
  nameWithType: Products.GetNewestProducts(Int32, Nullable<Boolean>)
  fullName: Uvendia.Domain.Repositories.Products.GetNewestProducts(System.Int32, System.Nullable<System.Boolean>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: GetNewestProducts
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 270
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public IEnumerable<Product> GetNewestProducts(int take = 3, bool? published)
    parameters:
    - id: take
      type: System.Int32
    - id: published
      type: System.Nullable{System.Boolean}
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Function GetNewestProducts(take As Integer = 3, published As Boolean?) As IEnumerable(Of Product)
  overload: Uvendia.Domain.Repositories.Products.GetNewestProducts*
  nameWithType.vb: Products.GetNewestProducts(Int32, Nullable(Of Boolean))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.GetNewestProducts(System.Int32, System.Nullable(Of System.Boolean))
  name.vb: GetNewestProducts(Int32, Nullable(Of Boolean))
- uid: Uvendia.Domain.Repositories.Products.Search(Uvendia.Domain.Entities.ProductSearch,System.Boolean)
  commentId: M:Uvendia.Domain.Repositories.Products.Search(Uvendia.Domain.Entities.ProductSearch,System.Boolean)
  id: Search(Uvendia.Domain.Entities.ProductSearch,System.Boolean)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Search(ProductSearch, Boolean)
  nameWithType: Products.Search(ProductSearch, Boolean)
  fullName: Uvendia.Domain.Repositories.Products.Search(Uvendia.Domain.Entities.ProductSearch, System.Boolean)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Search
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 291
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nSearches the specified criteria.\n"
  example: []
  syntax:
    content: public IEnumerable<Product> Search(ProductSearch criteria, bool includeVariants = true)
    parameters:
    - id: criteria
      type: Uvendia.Domain.Entities.ProductSearch
      description: The criteria.
    - id: includeVariants
      type: System.Boolean
      description: if set to <code>true</code> [include variants].
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
      description: ''
    content.vb: Public Function Search(criteria As ProductSearch, includeVariants As Boolean = True) As IEnumerable(Of Product)
  overload: Uvendia.Domain.Repositories.Products.Search*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists(System.String,System.String,System.Nullable{System.Int64})
  commentId: M:Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists(System.String,System.String,System.Nullable{System.Int64})
  id: CheckSkuAlreadyExists(System.String,System.String,System.Nullable{System.Int64})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: CheckSkuAlreadyExists(String, String, Nullable<Int64>)
  nameWithType: Products.CheckSkuAlreadyExists(String, String, Nullable<Int64>)
  fullName: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists(System.String, System.String, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: CheckSkuAlreadyExists
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 346
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public bool CheckSkuAlreadyExists(string sku, string variantSku, long? id)
    parameters:
    - id: sku
      type: System.String
    - id: variantSku
      type: System.String
    - id: id
      type: System.Nullable{System.Int64}
    return:
      type: System.Boolean
    content.vb: Public Function CheckSkuAlreadyExists(sku As String, variantSku As String, id As Long?) As Boolean
  overload: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists*
  nameWithType.vb: Products.CheckSkuAlreadyExists(String, String, Nullable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists(System.String, System.String, System.Nullable(Of System.Int64))
  name.vb: CheckSkuAlreadyExists(String, String, Nullable(Of Int64))
- uid: Uvendia.Domain.Repositories.Products.Save(Uvendia.Domain.Product)
  commentId: M:Uvendia.Domain.Repositories.Products.Save(Uvendia.Domain.Product)
  id: Save(Uvendia.Domain.Product)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Save(Product)
  nameWithType: Products.Save(Product)
  fullName: Uvendia.Domain.Repositories.Products.Save(Uvendia.Domain.Product)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Save
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 353
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  example: []
  syntax:
    content: public override void Save(Product entity)
    parameters:
    - id: entity
      type: Uvendia.Domain.Product
    content.vb: Public Overrides Sub Save(entity As Product)
  overridden: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.Save(Uvendia.Domain.Product)
  overload: Uvendia.Domain.Repositories.Products.Save*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Products.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  commentId: M:Uvendia.Domain.Repositories.Products.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  id: Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Save(IEnumerable<Product>)
  nameWithType: Products.Save(IEnumerable<Product>)
  fullName: Uvendia.Domain.Repositories.Products.Save(System.Collections.Generic.IEnumerable<Uvendia.Domain.Product>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Save
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 358
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public void Save(IEnumerable<Product> entities)
    parameters:
    - id: entities
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Sub Save(entities As IEnumerable(Of Product))
  overload: Uvendia.Domain.Repositories.Products.Save*
  nameWithType.vb: Products.Save(IEnumerable(Of Product))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.Save(System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Product))
  name.vb: Save(IEnumerable(Of Product))
- uid: Uvendia.Domain.Repositories.Products.DeleteById``1(``0)
  commentId: M:Uvendia.Domain.Repositories.Products.DeleteById``1(``0)
  id: DeleteById``1(``0)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: DeleteById<Y>(Y)
  nameWithType: Products.DeleteById<Y>(Y)
  fullName: Uvendia.Domain.Repositories.Products.DeleteById<Y>(Y)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: DeleteById
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 366
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public override void DeleteById<Y>(Y id)
    parameters:
    - id: id
      type: '{Y}'
    typeParameters:
    - id: Y
    content.vb: Public Overrides Sub DeleteById(Of Y)(id As Y)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.DeleteById``1({Y})
  overload: Uvendia.Domain.Repositories.Products.DeleteById*
  nameWithType.vb: Products.DeleteById(Of Y)(Y)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Products.DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
- uid: Uvendia.Domain.Repositories.Products.Delete(Uvendia.Domain.Product)
  commentId: M:Uvendia.Domain.Repositories.Products.Delete(Uvendia.Domain.Product)
  id: Delete(Uvendia.Domain.Product)
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Delete(Product)
  nameWithType: Products.Delete(Product)
  fullName: Uvendia.Domain.Repositories.Products.Delete(Uvendia.Domain.Product)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Delete
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 372
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public override void Delete(Product product)
    parameters:
    - id: product
      type: Uvendia.Domain.Product
    content.vb: Public Overrides Sub Delete(product As Product)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Delete(Uvendia.Domain.Product)
  overload: Uvendia.Domain.Repositories.Products.Delete*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Products.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  commentId: M:Uvendia.Domain.Repositories.Products.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  id: Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Product})
  parent: Uvendia.Domain.Repositories.Products
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<Product>)
  nameWithType: Products.Delete(IEnumerable<Product>)
  fullName: Uvendia.Domain.Repositories.Products.Delete(System.Collections.Generic.IEnumerable<Uvendia.Domain.Product>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Products.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Delete
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Products.cs
    startLine: 377
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public void Delete(IEnumerable<Product> products)
    parameters:
    - id: products
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
    content.vb: Public Sub Delete(products As IEnumerable(Of Product))
  overload: Uvendia.Domain.Repositories.Products.Delete*
  nameWithType.vb: Products.Delete(IEnumerable(Of Product))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Products.Delete(System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Product))
  name.vb: Delete(IEnumerable(Of Product))
references:
- uid: Uvendia.Domain.Repositories
  commentId: N:Uvendia.Domain.Repositories
  name: Uvendia.Domain.Repositories
  nameWithType: Uvendia.Domain.Repositories
  fullName: Uvendia.Domain.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<Product>
  nameWithType: BaseRepository<Product>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>
  nameWithType.vb: BaseRepository(Of Product)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product)
  name.vb: BaseRepository(Of Product)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  parent: Uvendia.Domain.Repositories
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<Product>
  nameWithType: UvendiaRepository<Product>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>
  nameWithType.vb: UvendiaRepository(Of Product)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product)
  name.vb: UvendiaRepository(Of Product)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Product}
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Product}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<Product>
  nameWithType: IBaseRepository<Product>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<Uvendia.Domain.Product>
  nameWithType.vb: IBaseRepository(Of Product)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of Uvendia.Domain.Product)
  name.vb: IBaseRepository(Of Product)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.CreateUnitOfWork
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<Product>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of Product).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<Product>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of Product).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<Product>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of Product).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<Product>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of Product).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._syncLock
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<Product>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>._syncLock
  nameWithType.vb: BaseRepository(Of Product)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._connectionStringName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<Product>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>._connectionStringName
  nameWithType.vb: BaseRepository(Of Product)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<Product>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>._tableSchema
  nameWithType.vb: BaseRepository(Of Product)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}._tableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<Product>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>._tableName
  nameWithType.vb: BaseRepository(Of Product)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Instance``1
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<Product>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Instance<R>()
  nameWithType.vb: BaseRepository(Of Product).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<Product>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of Product).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<Product>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.TableSchema
  nameWithType.vb: BaseRepository(Of Product).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.TableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<Product>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.TableName
  nameWithType.vb: BaseRepository(Of Product).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.CreateConnection
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<Product>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.CreateConnection()
  nameWithType.vb: BaseRepository(Of Product).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<Product>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of Product).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.SetConnection(System.Data.SqlClient.SqlConnection)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<Product>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of Product).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<Product>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of Product).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1({IID})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<Product>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of Product).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<Product>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of Product).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<Product>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Product).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<Product>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of Product).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Insert``1(Uvendia.Domain.Product)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Insert``1(Uvendia.Domain.Product)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(Product)
  nameWithType: BaseRepository<Product>.Insert<Y>(Product)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Insert<Y>(Uvendia.Domain.Product)
  nameWithType.vb: BaseRepository(Of Product).Insert(Of Y)(Product)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Insert(Of Y)(Uvendia.Domain.Product)
  name.vb: Insert(Of Y)(Product)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<Product>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of Product).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Update(Uvendia.Domain.Product)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Update(Uvendia.Domain.Product)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(Product)
  nameWithType: BaseRepository<Product>.Update(Product)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Update(Uvendia.Domain.Product)
  nameWithType.vb: BaseRepository(Of Product).Update(Product)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Update(Uvendia.Domain.Product)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<Product>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of Product).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Count(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  name: Count(String, Object)
  nameWithType: BaseRepository<Product>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Product).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<Product>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of Product).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<TEntity>
  nameWithType: BaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>
  nameWithType.vb: BaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)
  name.vb: BaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository
  commentId: N:Dazzling.Studio.SqlRepository
  name: Dazzling.Studio.SqlRepository
  nameWithType: Dazzling.Studio.SqlRepository
  fullName: Dazzling.Studio.SqlRepository
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<TEntity>
  nameWithType: UvendiaRepository<TEntity>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>
  nameWithType.vb: UvendiaRepository(Of TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity)
  name.vb: UvendiaRepository(Of TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<TEntity>
  nameWithType: IBaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<TEntity>
  nameWithType.vb: IBaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of TEntity)
  name.vb: IBaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of TEntity).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of TEntity).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<TEntity>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of TEntity).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<TEntity>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of TEntity).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<TEntity>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._syncLock
  nameWithType.vb: BaseRepository(Of TEntity)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<TEntity>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._connectionStringName
  nameWithType.vb: BaseRepository(Of TEntity)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<TEntity>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableSchema
  nameWithType.vb: BaseRepository(Of TEntity)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<TEntity>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableName
  nameWithType.vb: BaseRepository(Of TEntity)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<TEntity>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>()
  nameWithType.vb: BaseRepository(Of TEntity).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<TEntity>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of TEntity).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<TEntity>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableSchema
  nameWithType.vb: BaseRepository(Of TEntity).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<TEntity>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableName
  nameWithType.vb: BaseRepository(Of TEntity).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<TEntity>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection()
  nameWithType.vb: BaseRepository(Of TEntity).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<TEntity>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of TEntity).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  isExternal: true
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<TEntity>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of TEntity).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<TEntity>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of TEntity).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<TEntity>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of TEntity).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<TEntity>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of TEntity).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  isExternal: true
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<TEntity>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<TEntity>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of TEntity).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(TEntity)
  nameWithType: BaseRepository<TEntity>.Insert<Y>(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  name.vb: Insert(Of Y)(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<TEntity>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of TEntity).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(TEntity)
  nameWithType: BaseRepository<TEntity>.Update(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Update(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<TEntity>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of TEntity).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  isExternal: true
  name: Count(String, Object)
  nameWithType: BaseRepository<TEntity>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<TEntity>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of TEntity).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1({I})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<Product>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of Product).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<Product>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of Product).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.Single*
  commentId: Overload:Uvendia.Domain.Repositories.Products.Single
  name: Single
  nameWithType: Products.Single
  fullName: Uvendia.Domain.Repositories.Products.Single
- uid: '{I}'
  commentId: '!:I'
  definition: I
  name: I
  nameWithType: I
  fullName: I
- uid: Uvendia.Domain.Product
  commentId: T:Uvendia.Domain.Product
  parent: Uvendia.Domain
  name: Product
  nameWithType: Product
  fullName: Uvendia.Domain.Product
- uid: I
  name: I
  nameWithType: I
  fullName: I
- uid: Uvendia.Domain
  commentId: N:Uvendia.Domain
  name: Uvendia.Domain
  nameWithType: Uvendia.Domain
  fullName: Uvendia.Domain
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Single(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  name: Single(String, Object)
  nameWithType: BaseRepository<Product>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Product).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<Product>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of Product).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  isExternal: true
  name: Single(String, Object)
  nameWithType: BaseRepository<TEntity>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<TEntity>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of TEntity).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.GetParentProduct*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetParentProduct
  name: GetParentProduct
  nameWithType: Products.GetParentProduct
  fullName: Uvendia.Domain.Repositories.Products.GetParentProduct
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All``1({TType}[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All``1(``0[])
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<Product>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of Product).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<Product>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of Product).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.All*
  commentId: Overload:Uvendia.Domain.Repositories.Products.All
  name: All
  nameWithType: Products.All
  fullName: Uvendia.Domain.Repositories.Products.All
- uid: '{TType}[]'
  isExternal: true
  name: TType[]
  nameWithType: TType[]
  fullName: TType[]
  nameWithType.vb: TType()
  fullName.vb: TType()
  name.vb: TType()
  spec.csharp:
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
  commentId: T:System.Collections.Generic.IEnumerable{Uvendia.Domain.Product}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Product>
  nameWithType: IEnumerable<Product>
  fullName: System.Collections.Generic.IEnumerable<Uvendia.Domain.Product>
  nameWithType.vb: IEnumerable(Of Product)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Product)
  name.vb: IEnumerable(Of Product)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<TEntity>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of TEntity).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<TEntity>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of TEntity).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.All(System.String,System.String,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<Product>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Product).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<Product>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of Product).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  isExternal: true
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<TEntity>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<TEntity>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of TEntity).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.GetProductsPaged*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetProductsPaged
  name: GetProductsPaged
  nameWithType: Products.GetProductsPaged
  fullName: Uvendia.Domain.Repositories.Products.GetProductsPaged
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  commentId: T:System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  nameWithType: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  nameWithType.vb: Nullable(Of Boolean)
  fullName.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Enums.ProductSortyBy
  commentId: T:Uvendia.Domain.Enums.ProductSortyBy
  parent: Uvendia.Domain.Enums
  name: ProductSortyBy
  nameWithType: ProductSortyBy
  fullName: Uvendia.Domain.Enums.ProductSortyBy
- uid: System.Collections.Generic.List{Uvendia.Domain.Product}
  commentId: T:System.Collections.Generic.List{Uvendia.Domain.Product}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<Product>
  nameWithType: List<Product>
  fullName: System.Collections.Generic.List<Uvendia.Domain.Product>
  nameWithType.vb: List(Of Product)
  fullName.vb: System.Collections.Generic.List(Of Uvendia.Domain.Product)
  name.vb: List(Of Product)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Enums
  commentId: N:Uvendia.Domain.Enums
  name: Uvendia.Domain.Enums
  nameWithType: Uvendia.Domain.Enums
  fullName: Uvendia.Domain.Enums
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.GetTotalSoldItems*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetTotalSoldItems
  name: GetTotalSoldItems
  nameWithType: Products.GetTotalSoldItems
  fullName: Uvendia.Domain.Repositories.Products.GetTotalSoldItems
- uid: System.Int64[]
  isExternal: true
  name: Int64[]
  nameWithType: Int64[]
  fullName: System.Int64[]
  nameWithType.vb: Int64()
  fullName.vb: System.Int64()
  name.vb: Int64()
  spec.csharp:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Uvendia.Domain.Enums.OrderStatus[]
  isExternal: true
  name: OrderStatus[]
  nameWithType: OrderStatus[]
  fullName: Uvendia.Domain.Enums.OrderStatus[]
  nameWithType.vb: OrderStatus()
  fullName.vb: Uvendia.Domain.Enums.OrderStatus()
  name.vb: OrderStatus()
  spec.csharp:
  - uid: Uvendia.Domain.Enums.OrderStatus
    name: OrderStatus
    nameWithType: OrderStatus
    fullName: Uvendia.Domain.Enums.OrderStatus
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Uvendia.Domain.Enums.OrderStatus
    name: OrderStatus
    nameWithType: OrderStatus
    fullName: Uvendia.Domain.Enums.OrderStatus
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Collections.Generic.List{Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject}
  commentId: T:System.Collections.Generic.List{Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  name: List<ProductStockIndicationDataTransferObject>
  nameWithType: List<ProductStockIndicationDataTransferObject>
  fullName: System.Collections.Generic.List<Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject>
  nameWithType.vb: List(Of ProductStockIndicationDataTransferObject)
  fullName.vb: System.Collections.Generic.List(Of Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject)
  name.vb: List(Of ProductStockIndicationDataTransferObject)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject
    name: ProductStockIndicationDataTransferObject
    nameWithType: ProductStockIndicationDataTransferObject
    fullName: Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    nameWithType: List
    fullName: System.Collections.Generic.List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject
    name: ProductStockIndicationDataTransferObject
    nameWithType: ProductStockIndicationDataTransferObject
    fullName: Uvendia.Domain.Entities.ProductStockIndicationDataTransferObject
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetTopInterestingProducts
  name: GetTopInterestingProducts
  nameWithType: Products.GetTopInterestingProducts
  fullName: Uvendia.Domain.Repositories.Products.GetTopInterestingProducts
- uid: Uvendia.Domain.Repositories.Products.GetTopRatedProducts*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetTopRatedProducts
  name: GetTopRatedProducts
  nameWithType: Products.GetTopRatedProducts
  fullName: Uvendia.Domain.Repositories.Products.GetTopRatedProducts
- uid: Uvendia.Domain.Repositories.Products.GetRandomProducts*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetRandomProducts
  name: GetRandomProducts
  nameWithType: Products.GetRandomProducts
  fullName: Uvendia.Domain.Repositories.Products.GetRandomProducts
- uid: Uvendia.Domain.Repositories.Products.GetNewestProducts*
  commentId: Overload:Uvendia.Domain.Repositories.Products.GetNewestProducts
  name: GetNewestProducts
  nameWithType: Products.GetNewestProducts
  fullName: Uvendia.Domain.Repositories.Products.GetNewestProducts
- uid: Uvendia.Domain.Repositories.Products.Search*
  commentId: Overload:Uvendia.Domain.Repositories.Products.Search
  name: Search
  nameWithType: Products.Search
  fullName: Uvendia.Domain.Repositories.Products.Search
- uid: Uvendia.Domain.Entities.ProductSearch
  commentId: T:Uvendia.Domain.Entities.ProductSearch
  parent: Uvendia.Domain.Entities
  name: ProductSearch
  nameWithType: ProductSearch
  fullName: Uvendia.Domain.Entities.ProductSearch
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Uvendia.Domain.Entities
  commentId: N:Uvendia.Domain.Entities
  name: Uvendia.Domain.Entities
  nameWithType: Uvendia.Domain.Entities
  fullName: Uvendia.Domain.Entities
- uid: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists*
  commentId: Overload:Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists
  name: CheckSkuAlreadyExists
  nameWithType: Products.CheckSkuAlreadyExists
  fullName: Uvendia.Domain.Repositories.Products.CheckSkuAlreadyExists
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.Save(Uvendia.Domain.Product)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}.Save(Uvendia.Domain.Product)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Product}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(Product)
  nameWithType: UvendiaRepository<Product>.Save(Product)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.Save(Uvendia.Domain.Product)
  nameWithType.vb: UvendiaRepository(Of Product).Save(Product)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).Save(Uvendia.Domain.Product)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<Product>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Product>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of Product).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Product).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.Save*
  commentId: Overload:Uvendia.Domain.Repositories.Products.Save
  name: Save
  nameWithType: Products.Save
  fullName: Uvendia.Domain.Repositories.Products.Save
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(TEntity)
  nameWithType: UvendiaRepository<TEntity>.Save(TEntity)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save(TEntity)
  nameWithType.vb: UvendiaRepository(Of TEntity).Save(TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save(TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<TEntity>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of TEntity).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.DeleteById``1({Y})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.DeleteById``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<Product>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of Product).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<Product>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of Product).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.DeleteById*
  commentId: Overload:Uvendia.Domain.Repositories.Products.DeleteById
  name: DeleteById
  nameWithType: Products.DeleteById
  fullName: Uvendia.Domain.Repositories.Products.DeleteById
- uid: '{Y}'
  commentId: '!:Y'
  definition: Y
  name: Y
  nameWithType: Y
  fullName: Y
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<TEntity>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<TEntity>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of TEntity).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Y
  name: Y
  nameWithType: Y
  fullName: Y
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Delete(Uvendia.Domain.Product)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}.Delete(Uvendia.Domain.Product)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Product}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(Product)
  nameWithType: BaseRepository<Product>.Delete(Product)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Delete(Uvendia.Domain.Product)
  nameWithType.vb: BaseRepository(Of Product).Delete(Product)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Delete(Uvendia.Domain.Product)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<Product>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Product>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of Product).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Product).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Product
    name: Product
    nameWithType: Product
    fullName: Uvendia.Domain.Product
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Products.Delete*
  commentId: Overload:Uvendia.Domain.Repositories.Products.Delete
  name: Delete
  nameWithType: Products.Delete
  fullName: Uvendia.Domain.Repositories.Products.Delete
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(TEntity)
  nameWithType: BaseRepository<TEntity>.Delete(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Delete(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<TEntity>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of TEntity).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
