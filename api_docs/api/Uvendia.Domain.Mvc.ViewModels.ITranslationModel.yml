### YamlMime:ManagedReference
items:
- uid: Uvendia.Domain.Mvc.ViewModels.ITranslationModel
  commentId: T:Uvendia.Domain.Mvc.ViewModels.ITranslationModel
  id: ITranslationModel
  parent: Uvendia.Domain.Mvc.ViewModels
  children:
  - Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
  langs:
  - csharp
  - vb
  name: ITranslationModel
  nameWithType: ITranslationModel
  fullName: Uvendia.Domain.Mvc.ViewModels.ITranslationModel
  type: Interface
  source:
    remote:
      path: Uvendia.Domain/Mvc/ViewModels/ITranslationModel.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: ITranslationModel
    path: ../../dazzling.studio/Uvendia.Domain/Mvc/ViewModels/ITranslationModel.cs
    startLine: 8
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Mvc.ViewModels
  syntax:
    content: public interface ITranslationModel
    content.vb: Public Interface ITranslationModel
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
  commentId: P:Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
  id: Translations
  parent: Uvendia.Domain.Mvc.ViewModels.ITranslationModel
  langs:
  - csharp
  - vb
  name: Translations
  nameWithType: ITranslationModel.Translations
  fullName: Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
  type: Property
  source:
    remote:
      path: Uvendia.Domain/Mvc/ViewModels/ITranslationModel.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Translations
    path: ../../dazzling.studio/Uvendia.Domain/Mvc/ViewModels/ITranslationModel.cs
    startLine: 10
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Mvc.ViewModels
  syntax:
    content: IList<Translation> Translations { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IList{Uvendia.Domain.Translation}
    content.vb: Property Translations As IList(Of Translation)
  overload: Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations*
  modifiers.csharp:
  - get
  - set
references:
- uid: Uvendia.Domain.Mvc.ViewModels
  commentId: N:Uvendia.Domain.Mvc.ViewModels
  name: Uvendia.Domain.Mvc.ViewModels
  nameWithType: Uvendia.Domain.Mvc.ViewModels
  fullName: Uvendia.Domain.Mvc.ViewModels
- uid: Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations*
  commentId: Overload:Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
  name: Translations
  nameWithType: ITranslationModel.Translations
  fullName: Uvendia.Domain.Mvc.ViewModels.ITranslationModel.Translations
- uid: System.Collections.Generic.IList{Uvendia.Domain.Translation}
  commentId: T:System.Collections.Generic.IList{Uvendia.Domain.Translation}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Translation>
  nameWithType: IList<Translation>
  fullName: System.Collections.Generic.IList<Uvendia.Domain.Translation>
  nameWithType.vb: IList(Of Translation)
  fullName.vb: System.Collections.Generic.IList(Of Uvendia.Domain.Translation)
  name.vb: IList(Of Translation)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Translation
    name: Translation
    nameWithType: Translation
    fullName: Uvendia.Domain.Translation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Translation
    name: Translation
    nameWithType: Translation
    fullName: Uvendia.Domain.Translation
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullName.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
