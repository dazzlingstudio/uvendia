### YamlMime:ManagedReference
items:
- uid: Uvendia.Domain.Repositories.Stores
  commentId: T:Uvendia.Domain.Repositories.Stores
  id: Stores
  parent: Uvendia.Domain.Repositories
  children:
  - Uvendia.Domain.Repositories.Stores.All(System.String,System.String,System.Int32,System.Object)
  - Uvendia.Domain.Repositories.Stores.All``1(``0[])
  - Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists(System.String,System.Nullable{System.Int64})
  - Uvendia.Domain.Repositories.Stores.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  - Uvendia.Domain.Repositories.Stores.Delete(Uvendia.Domain.Store)
  - Uvendia.Domain.Repositories.Stores.DeleteById``1(``0)
  - Uvendia.Domain.Repositories.Stores.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  - Uvendia.Domain.Repositories.Stores.Save(Uvendia.Domain.Store)
  - Uvendia.Domain.Repositories.Stores.Single(System.String,System.Object)
  - Uvendia.Domain.Repositories.Stores.Single``1(``0)
  langs:
  - csharp
  - vb
  name: Stores
  nameWithType: Stores
  fullName: Uvendia.Domain.Repositories.Stores
  type: Class
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Stores
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 15
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  example: []
  syntax:
    content: 'public class Stores : UvendiaRepository<Store>, IBaseRepository<Store>'
    content.vb: >-
      Public Class Stores
          Inherits UvendiaRepository(Of Store)
          Implements IBaseRepository(Of Store)
  inheritance:
  - System.Object
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  implements:
  - Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Store}
  inheritedMembers:
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.CreateUnitOfWork
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._syncLock
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._connectionStringName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Instance``1
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.CreateConnection
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.SetConnection(System.Data.SqlClient.SqlConnection)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1({IID})
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Insert``1(Uvendia.Domain.Store)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Update(Uvendia.Domain.Store)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Count(System.String,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Uvendia.Domain.Repositories.Stores.Single``1(``0)
  commentId: M:Uvendia.Domain.Repositories.Stores.Single``1(``0)
  id: Single``1(``0)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Single<I>(I)
  nameWithType: Stores.Single<I>(I)
  fullName: Uvendia.Domain.Repositories.Stores.Single<I>(I)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Single
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 18
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  example: []
  syntax:
    content: public override Store Single<I>(I id)
    parameters:
    - id: id
      type: '{I}'
    typeParameters:
    - id: I
    return:
      type: Uvendia.Domain.Store
    content.vb: Public Overrides Function Single(Of I)(id As I) As Store
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1({I})
  overload: Uvendia.Domain.Repositories.Stores.Single*
  nameWithType.vb: Stores.Single(Of I)(I)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Stores.Single(Of I)(I)
  name.vb: Single(Of I)(I)
- uid: Uvendia.Domain.Repositories.Stores.Single(System.String,System.Object)
  commentId: M:Uvendia.Domain.Repositories.Stores.Single(System.String,System.Object)
  id: Single(System.String,System.Object)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Single(String, Object)
  nameWithType: Stores.Single(String, Object)
  fullName: Uvendia.Domain.Repositories.Stores.Single(System.String, System.Object)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Single
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 45
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns single store filtered by a SQL where clause.\nThese query aliases you can use in your &apos;where&apos; clause:\n[Store] s        \n[Definition] d\n[Property] prop\n[PropertyValue] pv    \n[StoreToTranslation] stt\n[Translation] t\n\neq. where s.Published = 1\n"
  example: []
  syntax:
    content: public override Store Single(string where = null, object parms = null)
    parameters:
    - id: where
      type: System.String
      description: The where.
    - id: parms
      type: System.Object
      description: The parms.
    return:
      type: Uvendia.Domain.Store
      description: ''
    content.vb: Public Overrides Function Single(where As String = Nothing, parms As Object = Nothing) As Store
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single(System.String,System.Object)
  overload: Uvendia.Domain.Repositories.Stores.Single*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Stores.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Uvendia.Domain.Repositories.Stores.All(System.String,System.String,System.Int32,System.Object)
  id: All(System.String,System.String,System.Int32,System.Object)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: All(String, String, Int32, Object)
  nameWithType: Stores.All(String, String, Int32, Object)
  fullName: Uvendia.Domain.Repositories.Stores.All(System.String, System.String, System.Int32, System.Object)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: All
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 74
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns all the stores filtered by a SQL where clause.\nThese query aliases you can use in your &apos;where&apos; clause:\n[Store] s        \n[Definition] d\n[Property] prop\n[PropertyValue] pv   \n[StoreToTranslation] stt\n[Translation] t\n\neq. where s.Published = 1\n"
  example: []
  syntax:
    content: public override IEnumerable<Store> All(string where = null, string orderBy = null, int top = 0, object parms = null)
    parameters:
    - id: where
      type: System.String
      description: The where.
    - id: orderBy
      type: System.String
      description: The order by.
    - id: top
      type: System.Int32
      description: The top.
    - id: parms
      type: System.Object
      description: The parms.
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
      description: ''
    content.vb: Public Overrides Function All(where As String = Nothing, orderBy As String = Nothing, top As Integer = 0, parms As Object = Nothing) As IEnumerable(Of Store)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All(System.String,System.String,System.Int32,System.Object)
  overload: Uvendia.Domain.Repositories.Stores.All*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Stores.All``1(``0[])
  commentId: M:Uvendia.Domain.Repositories.Stores.All``1(``0[])
  id: All``1(``0[])
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: All<TType>(TType[])
  nameWithType: Stores.All<TType>(TType[])
  fullName: Uvendia.Domain.Repositories.Stores.All<TType>(TType[])
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: All
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 94
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nReturns all the entities specified by the given identifiers\n"
  example: []
  syntax:
    content: public override IEnumerable<Store> All<TType>(params TType[] ids)
    parameters:
    - id: ids
      type: '{TType}[]'
      description: The ids.
    typeParameters:
    - id: TType
      description: The type of the type.
    return:
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
      description: ''
    content.vb: Public Overrides Function All(Of TType)(ParamArray ids As TType()) As IEnumerable(Of Store)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All``1({TType}[])
  overload: Uvendia.Domain.Repositories.Stores.All*
  nameWithType.vb: Stores.All(Of TType)(TType())
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Stores.All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
- uid: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists(System.String,System.Nullable{System.Int64})
  commentId: M:Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists(System.String,System.Nullable{System.Int64})
  id: CheckStoreAlreadyExists(System.String,System.Nullable{System.Int64})
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: CheckStoreAlreadyExists(String, Nullable<Int64>)
  nameWithType: Stores.CheckStoreAlreadyExists(String, Nullable<Int64>)
  fullName: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists(System.String, System.Nullable<System.Int64>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: CheckStoreAlreadyExists
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 126
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nChecks the store already exists.\n"
  example: []
  syntax:
    content: public bool CheckStoreAlreadyExists(string name, long? id)
    parameters:
    - id: name
      type: System.String
      description: The name.
    - id: id
      type: System.Nullable{System.Int64}
      description: The identifier.
    return:
      type: System.Boolean
      description: ''
    content.vb: Public Function CheckStoreAlreadyExists(name As String, id As Long?) As Boolean
  overload: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists*
  nameWithType.vb: Stores.CheckStoreAlreadyExists(String, Nullable(Of Int64))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists(System.String, System.Nullable(Of System.Int64))
  name.vb: CheckStoreAlreadyExists(String, Nullable(Of Int64))
- uid: Uvendia.Domain.Repositories.Stores.Save(Uvendia.Domain.Store)
  commentId: M:Uvendia.Domain.Repositories.Stores.Save(Uvendia.Domain.Store)
  id: Save(Uvendia.Domain.Store)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Save(Store)
  nameWithType: Stores.Save(Store)
  fullName: Uvendia.Domain.Repositories.Stores.Save(Uvendia.Domain.Store)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Save
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 155
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public override void Save(Store store)
    parameters:
    - id: store
      type: Uvendia.Domain.Store
    content.vb: Public Overrides Sub Save(store As Store)
  overridden: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.Save(Uvendia.Domain.Store)
  overload: Uvendia.Domain.Repositories.Stores.Save*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Stores.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  commentId: M:Uvendia.Domain.Repositories.Stores.Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  id: Save(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Save(IEnumerable<Store>)
  nameWithType: Stores.Save(IEnumerable<Store>)
  fullName: Uvendia.Domain.Repositories.Stores.Save(System.Collections.Generic.IEnumerable<Uvendia.Domain.Store>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Save
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 160
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public void Save(IEnumerable<Store> stores)
    parameters:
    - id: stores
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
    content.vb: Public Sub Save(stores As IEnumerable(Of Store))
  overload: Uvendia.Domain.Repositories.Stores.Save*
  nameWithType.vb: Stores.Save(IEnumerable(Of Store))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Stores.Save(System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Store))
  name.vb: Save(IEnumerable(Of Store))
- uid: Uvendia.Domain.Repositories.Stores.DeleteById``1(``0)
  commentId: M:Uvendia.Domain.Repositories.Stores.DeleteById``1(``0)
  id: DeleteById``1(``0)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: DeleteById<Y>(Y)
  nameWithType: Stores.DeleteById<Y>(Y)
  fullName: Uvendia.Domain.Repositories.Stores.DeleteById<Y>(Y)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: DeleteById
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 220
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public override void DeleteById<Y>(Y id)
    parameters:
    - id: id
      type: '{Y}'
    typeParameters:
    - id: Y
    content.vb: Public Overrides Sub DeleteById(Of Y)(id As Y)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.DeleteById``1({Y})
  overload: Uvendia.Domain.Repositories.Stores.DeleteById*
  nameWithType.vb: Stores.DeleteById(Of Y)(Y)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Uvendia.Domain.Repositories.Stores.DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
- uid: Uvendia.Domain.Repositories.Stores.Delete(Uvendia.Domain.Store)
  commentId: M:Uvendia.Domain.Repositories.Stores.Delete(Uvendia.Domain.Store)
  id: Delete(Uvendia.Domain.Store)
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Delete(Store)
  nameWithType: Stores.Delete(Store)
  fullName: Uvendia.Domain.Repositories.Stores.Delete(Uvendia.Domain.Store)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Delete
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 226
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public override void Delete(Store store)
    parameters:
    - id: store
      type: Uvendia.Domain.Store
    content.vb: Public Overrides Sub Delete(store As Store)
  overridden: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Delete(Uvendia.Domain.Store)
  overload: Uvendia.Domain.Repositories.Stores.Delete*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Uvendia.Domain.Repositories.Stores.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  commentId: M:Uvendia.Domain.Repositories.Stores.Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  id: Delete(System.Collections.Generic.IEnumerable{Uvendia.Domain.Store})
  parent: Uvendia.Domain.Repositories.Stores
  langs:
  - csharp
  - vb
  name: Delete(IEnumerable<Store>)
  nameWithType: Stores.Delete(IEnumerable<Store>)
  fullName: Uvendia.Domain.Repositories.Stores.Delete(System.Collections.Generic.IEnumerable<Uvendia.Domain.Store>)
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Stores.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Delete
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Stores.cs
    startLine: 231
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: public void Delete(IEnumerable<Store> stores)
    parameters:
    - id: stores
      type: System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
    content.vb: Public Sub Delete(stores As IEnumerable(Of Store))
  overload: Uvendia.Domain.Repositories.Stores.Delete*
  nameWithType.vb: Stores.Delete(IEnumerable(Of Store))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Stores.Delete(System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Store))
  name.vb: Delete(IEnumerable(Of Store))
references:
- uid: Uvendia.Domain.Repositories
  commentId: N:Uvendia.Domain.Repositories
  name: Uvendia.Domain.Repositories
  nameWithType: Uvendia.Domain.Repositories
  fullName: Uvendia.Domain.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<Store>
  nameWithType: BaseRepository<Store>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>
  nameWithType.vb: BaseRepository(Of Store)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store)
  name.vb: BaseRepository(Of Store)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  parent: Uvendia.Domain.Repositories
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<Store>
  nameWithType: UvendiaRepository<Store>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>
  nameWithType.vb: UvendiaRepository(Of Store)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store)
  name.vb: UvendiaRepository(Of Store)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Store}
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Store}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<Store>
  nameWithType: IBaseRepository<Store>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<Uvendia.Domain.Store>
  nameWithType.vb: IBaseRepository(Of Store)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of Uvendia.Domain.Store)
  name.vb: IBaseRepository(Of Store)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.CreateUnitOfWork
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<Store>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of Store).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<Store>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of Store).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<Store>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of Store).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<Store>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of Store).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._syncLock
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<Store>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>._syncLock
  nameWithType.vb: BaseRepository(Of Store)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._connectionStringName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<Store>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>._connectionStringName
  nameWithType.vb: BaseRepository(Of Store)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<Store>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>._tableSchema
  nameWithType.vb: BaseRepository(Of Store)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}._tableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<Store>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>._tableName
  nameWithType.vb: BaseRepository(Of Store)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Instance``1
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<Store>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Instance<R>()
  nameWithType.vb: BaseRepository(Of Store).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<Store>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of Store).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<Store>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.TableSchema
  nameWithType.vb: BaseRepository(Of Store).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.TableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<Store>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.TableName
  nameWithType.vb: BaseRepository(Of Store).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.CreateConnection
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<Store>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.CreateConnection()
  nameWithType.vb: BaseRepository(Of Store).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<Store>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of Store).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.SetConnection(System.Data.SqlClient.SqlConnection)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<Store>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of Store).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<Store>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of Store).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1({IID})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<Store>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of Store).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<Store>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of Store).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<Store>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Store).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<Store>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of Store).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Insert``1(Uvendia.Domain.Store)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Insert``1(Uvendia.Domain.Store)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(Store)
  nameWithType: BaseRepository<Store>.Insert<Y>(Store)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Insert<Y>(Uvendia.Domain.Store)
  nameWithType.vb: BaseRepository(Of Store).Insert(Of Y)(Store)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Insert(Of Y)(Uvendia.Domain.Store)
  name.vb: Insert(Of Y)(Store)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<Store>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of Store).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Update(Uvendia.Domain.Store)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Update(Uvendia.Domain.Store)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(Store)
  nameWithType: BaseRepository<Store>.Update(Store)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Update(Uvendia.Domain.Store)
  nameWithType.vb: BaseRepository(Of Store).Update(Store)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Update(Uvendia.Domain.Store)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<Store>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of Store).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Count(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  name: Count(String, Object)
  nameWithType: BaseRepository<Store>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Store).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<Store>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of Store).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<TEntity>
  nameWithType: BaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>
  nameWithType.vb: BaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)
  name.vb: BaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository
  commentId: N:Dazzling.Studio.SqlRepository
  name: Dazzling.Studio.SqlRepository
  nameWithType: Dazzling.Studio.SqlRepository
  fullName: Dazzling.Studio.SqlRepository
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<TEntity>
  nameWithType: UvendiaRepository<TEntity>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>
  nameWithType.vb: UvendiaRepository(Of TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity)
  name.vb: UvendiaRepository(Of TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<TEntity>
  nameWithType: IBaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<TEntity>
  nameWithType.vb: IBaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of TEntity)
  name.vb: IBaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of TEntity).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of TEntity).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<TEntity>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of TEntity).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<TEntity>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of TEntity).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<TEntity>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._syncLock
  nameWithType.vb: BaseRepository(Of TEntity)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<TEntity>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._connectionStringName
  nameWithType.vb: BaseRepository(Of TEntity)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<TEntity>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableSchema
  nameWithType.vb: BaseRepository(Of TEntity)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<TEntity>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableName
  nameWithType.vb: BaseRepository(Of TEntity)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<TEntity>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>()
  nameWithType.vb: BaseRepository(Of TEntity).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<TEntity>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of TEntity).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<TEntity>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableSchema
  nameWithType.vb: BaseRepository(Of TEntity).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<TEntity>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableName
  nameWithType.vb: BaseRepository(Of TEntity).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<TEntity>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection()
  nameWithType.vb: BaseRepository(Of TEntity).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<TEntity>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of TEntity).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  isExternal: true
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<TEntity>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of TEntity).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<TEntity>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of TEntity).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<TEntity>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of TEntity).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<TEntity>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of TEntity).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  isExternal: true
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<TEntity>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<TEntity>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of TEntity).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(TEntity)
  nameWithType: BaseRepository<TEntity>.Insert<Y>(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  name.vb: Insert(Of Y)(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<TEntity>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of TEntity).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(TEntity)
  nameWithType: BaseRepository<TEntity>.Update(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Update(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<TEntity>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of TEntity).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  isExternal: true
  name: Count(String, Object)
  nameWithType: BaseRepository<TEntity>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<TEntity>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of TEntity).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1({I})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<Store>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of Store).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<Store>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of Store).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.Single*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.Single
  name: Single
  nameWithType: Stores.Single
  fullName: Uvendia.Domain.Repositories.Stores.Single
- uid: '{I}'
  commentId: '!:I'
  definition: I
  name: I
  nameWithType: I
  fullName: I
- uid: Uvendia.Domain.Store
  commentId: T:Uvendia.Domain.Store
  parent: Uvendia.Domain
  name: Store
  nameWithType: Store
  fullName: Uvendia.Domain.Store
- uid: I
  name: I
  nameWithType: I
  fullName: I
- uid: Uvendia.Domain
  commentId: N:Uvendia.Domain
  name: Uvendia.Domain
  nameWithType: Uvendia.Domain
  fullName: Uvendia.Domain
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Single(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  name: Single(String, Object)
  nameWithType: BaseRepository<Store>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Store).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<Store>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of Store).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  isExternal: true
  name: Single(String, Object)
  nameWithType: BaseRepository<TEntity>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<TEntity>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of TEntity).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All(System.String,System.String,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<Store>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Store).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<Store>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of Store).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.All*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.All
  name: All
  nameWithType: Stores.All
  fullName: Uvendia.Domain.Repositories.Stores.All
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
  commentId: T:System.Collections.Generic.IEnumerable{Uvendia.Domain.Store}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Store>
  nameWithType: IEnumerable<Store>
  fullName: System.Collections.Generic.IEnumerable<Uvendia.Domain.Store>
  nameWithType.vb: IEnumerable(Of Store)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Uvendia.Domain.Store)
  name.vb: IEnumerable(Of Store)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  isExternal: true
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<TEntity>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<TEntity>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of TEntity).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All``1({TType}[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.All``1(``0[])
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<Store>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of Store).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<Store>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of Store).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TType}[]'
  isExternal: true
  name: TType[]
  nameWithType: TType[]
  fullName: TType[]
  nameWithType.vb: TType()
  fullName.vb: TType()
  name.vb: TType()
  spec.csharp:
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<TEntity>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of TEntity).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<TEntity>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of TEntity).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists
  name: CheckStoreAlreadyExists
  nameWithType: Stores.CheckStoreAlreadyExists
  fullName: Uvendia.Domain.Repositories.Stores.CheckStoreAlreadyExists
- uid: System.Nullable{System.Int64}
  commentId: T:System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullName.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.Save(Uvendia.Domain.Store)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}.Save(Uvendia.Domain.Store)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Store}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(Store)
  nameWithType: UvendiaRepository<Store>.Save(Store)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.Save(Uvendia.Domain.Store)
  nameWithType.vb: UvendiaRepository(Of Store).Save(Store)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).Save(Uvendia.Domain.Store)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<Store>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Store>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of Store).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Store).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.Save*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.Save
  name: Save
  nameWithType: Stores.Save
  fullName: Uvendia.Domain.Repositories.Stores.Save
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(TEntity)
  nameWithType: UvendiaRepository<TEntity>.Save(TEntity)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save(TEntity)
  nameWithType.vb: UvendiaRepository(Of TEntity).Save(TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save(TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<TEntity>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of TEntity).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.DeleteById``1({Y})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.DeleteById``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<Store>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of Store).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<Store>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of Store).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.DeleteById*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.DeleteById
  name: DeleteById
  nameWithType: Stores.DeleteById
  fullName: Uvendia.Domain.Repositories.Stores.DeleteById
- uid: '{Y}'
  commentId: '!:Y'
  definition: Y
  name: Y
  nameWithType: Y
  fullName: Y
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<TEntity>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<TEntity>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of TEntity).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Y
  name: Y
  nameWithType: Y
  fullName: Y
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Delete(Uvendia.Domain.Store)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}.Delete(Uvendia.Domain.Store)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Store}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(Store)
  nameWithType: BaseRepository<Store>.Delete(Store)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Delete(Uvendia.Domain.Store)
  nameWithType.vb: BaseRepository(Of Store).Delete(Store)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Delete(Uvendia.Domain.Store)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<Store>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Store>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of Store).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Store).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Store
    name: Store
    nameWithType: Store
    fullName: Uvendia.Domain.Store
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Stores.Delete*
  commentId: Overload:Uvendia.Domain.Repositories.Stores.Delete
  name: Delete
  nameWithType: Stores.Delete
  fullName: Uvendia.Domain.Repositories.Stores.Delete
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(TEntity)
  nameWithType: BaseRepository<TEntity>.Delete(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Delete(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<TEntity>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of TEntity).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
