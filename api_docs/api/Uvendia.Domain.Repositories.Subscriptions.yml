### YamlMime:ManagedReference
items:
- uid: Uvendia.Domain.Repositories.Subscriptions
  commentId: T:Uvendia.Domain.Repositories.Subscriptions
  id: Subscriptions
  parent: Uvendia.Domain.Repositories
  children:
  - Uvendia.Domain.Repositories.Subscriptions.Save(Uvendia.Domain.Subscription[])
  langs:
  - csharp
  - vb
  name: Subscriptions
  nameWithType: Subscriptions
  fullName: Uvendia.Domain.Repositories.Subscriptions
  type: Class
  source:
    remote:
      path: Uvendia.Domain/Repositories/Subscriptions.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Subscriptions
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Subscriptions.cs
    startLine: 9
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  syntax:
    content: 'public class Subscriptions : UvendiaRepository<Subscription>, IBaseRepository<Subscription>'
    content.vb: >-
      Public Class Subscriptions
          Inherits UvendiaRepository(Of Subscription)
          Implements IBaseRepository(Of Subscription)
  inheritance:
  - System.Object
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  implements:
  - Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Subscription}
  inheritedMembers:
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.CreateUnitOfWork
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.Save(Uvendia.Domain.Subscription)
  - Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._syncLock
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._connectionStringName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Instance``1
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableSchema
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableName
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.CreateConnection
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.SetConnection(System.Data.SqlClient.SqlConnection)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single``1({IID})
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single(System.String,System.Object)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All``1({TType}[])
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All(System.String,System.String,System.Int32,System.Object)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Insert``1(Uvendia.Domain.Subscription)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Update(Uvendia.Domain.Subscription)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Delete(Uvendia.Domain.Subscription)
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.DeleteById``1({Y})
  - Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Count(System.String,System.Object)
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Uvendia.Domain.Repositories.Subscriptions.Save(Uvendia.Domain.Subscription[])
  commentId: M:Uvendia.Domain.Repositories.Subscriptions.Save(Uvendia.Domain.Subscription[])
  id: Save(Uvendia.Domain.Subscription[])
  parent: Uvendia.Domain.Repositories.Subscriptions
  langs:
  - csharp
  - vb
  name: Save(Subscription[])
  nameWithType: Subscriptions.Save(Subscription[])
  fullName: Uvendia.Domain.Repositories.Subscriptions.Save(Uvendia.Domain.Subscription[])
  type: Method
  source:
    remote:
      path: Uvendia.Domain/Repositories/Subscriptions.cs
      branch: umbraco8
      repo: https://sherlonus@bitbucket.org/sherlonus/dazzling.studio.git
    id: Save
    path: ../../dazzling.studio/Uvendia.Domain/Repositories/Subscriptions.cs
    startLine: 15
  assemblies:
  - Uvendia.Domain
  namespace: Uvendia.Domain.Repositories
  summary: "\nSaves the specified subscriptions.\n"
  example: []
  syntax:
    content: public void Save(params Subscription[] subscriptions)
    parameters:
    - id: subscriptions
      type: Uvendia.Domain.Subscription[]
      description: The addresses.
    content.vb: Public Sub Save(ParamArray subscriptions As Subscription())
  overload: Uvendia.Domain.Repositories.Subscriptions.Save*
  nameWithType.vb: Subscriptions.Save(Subscription())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Uvendia.Domain.Repositories.Subscriptions.Save(Uvendia.Domain.Subscription())
  name.vb: Save(Subscription())
references:
- uid: Uvendia.Domain.Repositories
  commentId: N:Uvendia.Domain.Repositories
  name: Uvendia.Domain.Repositories
  nameWithType: Uvendia.Domain.Repositories
  fullName: Uvendia.Domain.Repositories
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<Subscription>
  nameWithType: BaseRepository<Subscription>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>
  nameWithType.vb: BaseRepository(Of Subscription)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription)
  name.vb: BaseRepository(Of Subscription)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  parent: Uvendia.Domain.Repositories
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<Subscription>
  nameWithType: UvendiaRepository<Subscription>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>
  nameWithType.vb: UvendiaRepository(Of Subscription)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription)
  name.vb: UvendiaRepository(Of Subscription)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Subscription}
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository{Uvendia.Domain.Subscription}
  parent: Dazzling.Studio.SqlRepository
  definition: Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<Subscription>
  nameWithType: IBaseRepository<Subscription>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<Uvendia.Domain.Subscription>
  nameWithType.vb: IBaseRepository(Of Subscription)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of Uvendia.Domain.Subscription)
  name.vb: IBaseRepository(Of Subscription)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.CreateUnitOfWork
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<Subscription>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of Subscription).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<Subscription>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of Subscription).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.Save(Uvendia.Domain.Subscription)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.Save(Uvendia.Domain.Subscription)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(Subscription)
  nameWithType: UvendiaRepository<Subscription>.Save(Subscription)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.Save(Uvendia.Domain.Subscription)
  nameWithType.vb: UvendiaRepository(Of Subscription).Save(Subscription)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).Save(Uvendia.Domain.Subscription)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<Subscription>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of Subscription).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).Save
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  parent: Uvendia.Domain.Repositories.UvendiaRepository{Uvendia.Domain.Subscription}
  definition: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<Subscription>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of Subscription).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<Subscription>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<Uvendia.Domain.Subscription>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of Subscription).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of Uvendia.Domain.Subscription).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._syncLock
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<Subscription>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>._syncLock
  nameWithType.vb: BaseRepository(Of Subscription)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._connectionStringName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<Subscription>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>._connectionStringName
  nameWithType.vb: BaseRepository(Of Subscription)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<Subscription>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>._tableSchema
  nameWithType.vb: BaseRepository(Of Subscription)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}._tableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<Subscription>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>._tableName
  nameWithType.vb: BaseRepository(Of Subscription)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Instance``1
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<Subscription>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Instance<R>()
  nameWithType.vb: BaseRepository(Of Subscription).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<Subscription>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of Subscription).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableSchema
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<Subscription>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.TableSchema
  nameWithType.vb: BaseRepository(Of Subscription).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.TableName
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<Subscription>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.TableName
  nameWithType.vb: BaseRepository(Of Subscription).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.CreateConnection
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<Subscription>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.CreateConnection()
  nameWithType.vb: BaseRepository(Of Subscription).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<Subscription>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of Subscription).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.SetConnection(System.Data.SqlClient.SqlConnection)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<Subscription>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of Subscription).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<Subscription>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of Subscription).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single``1({IID})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<Subscription>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of Subscription).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<Subscription>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of Subscription).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Single(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  name: Single(String, Object)
  nameWithType: BaseRepository<Subscription>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Subscription).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<Subscription>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of Subscription).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All``1({TType}[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All``1(``0[])
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<Subscription>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of Subscription).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<Subscription>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of Subscription).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.All(System.String,System.String,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<Subscription>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Subscription).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<Subscription>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of Subscription).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<Subscription>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of Subscription).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<Subscription>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of Subscription).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Insert``1(Uvendia.Domain.Subscription)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Insert``1(Uvendia.Domain.Subscription)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(Subscription)
  nameWithType: BaseRepository<Subscription>.Insert<Y>(Subscription)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Insert<Y>(Uvendia.Domain.Subscription)
  nameWithType.vb: BaseRepository(Of Subscription).Insert(Of Y)(Subscription)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Insert(Of Y)(Uvendia.Domain.Subscription)
  name.vb: Insert(Of Y)(Subscription)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<Subscription>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of Subscription).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Update(Uvendia.Domain.Subscription)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Update(Uvendia.Domain.Subscription)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(Subscription)
  nameWithType: BaseRepository<Subscription>.Update(Subscription)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Update(Uvendia.Domain.Subscription)
  nameWithType.vb: BaseRepository(Of Subscription).Update(Subscription)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Update(Uvendia.Domain.Subscription)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<Subscription>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of Subscription).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Delete(Uvendia.Domain.Subscription)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Delete(Uvendia.Domain.Subscription)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(Subscription)
  nameWithType: BaseRepository<Subscription>.Delete(Subscription)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Delete(Uvendia.Domain.Subscription)
  nameWithType.vb: BaseRepository(Of Subscription).Delete(Subscription)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Delete(Uvendia.Domain.Subscription)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<Subscription>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of Subscription).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Delete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.DeleteById``1({Y})
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.DeleteById``1(``0)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<Subscription>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of Subscription).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<Subscription>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of Subscription).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}.Count(System.String,System.Object)
  parent: Dazzling.Studio.SqlRepository.BaseRepository{Uvendia.Domain.Subscription}
  definition: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  name: Count(String, Object)
  nameWithType: BaseRepository<Subscription>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of Subscription).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<Subscription>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<Uvendia.Domain.Subscription>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of Subscription).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of Uvendia.Domain.Subscription).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.BaseRepository`1
  name: BaseRepository<TEntity>
  nameWithType: BaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>
  nameWithType.vb: BaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)
  name.vb: BaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1
    name: BaseRepository
    nameWithType: BaseRepository
    fullName: Dazzling.Studio.SqlRepository.BaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository
  commentId: N:Dazzling.Studio.SqlRepository
  name: Dazzling.Studio.SqlRepository
  nameWithType: Dazzling.Studio.SqlRepository
  fullName: Dazzling.Studio.SqlRepository
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1
  commentId: T:Uvendia.Domain.Repositories.UvendiaRepository`1
  name: UvendiaRepository<TEntity>
  nameWithType: UvendiaRepository<TEntity>
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>
  nameWithType.vb: UvendiaRepository(Of TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity)
  name.vb: UvendiaRepository(Of TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1
    name: UvendiaRepository
    nameWithType: UvendiaRepository
    fullName: Uvendia.Domain.Repositories.UvendiaRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
  commentId: T:Dazzling.Studio.SqlRepository.IBaseRepository`1
  name: IBaseRepository<TEntity>
  nameWithType: IBaseRepository<TEntity>
  fullName: Dazzling.Studio.SqlRepository.IBaseRepository<TEntity>
  nameWithType.vb: IBaseRepository(Of TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.IBaseRepository(Of TEntity)
  name.vb: IBaseRepository(Of TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: <
    nameWithType: <
    fullName: <
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.IBaseRepository`1
    name: IBaseRepository
    nameWithType: IBaseRepository
    fullName: Dazzling.Studio.SqlRepository.IBaseRepository
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
  name: CreateUnitOfWork()
  nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork()
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork()
  nameWithType.vb: UvendiaRepository(Of TEntity).CreateUnitOfWork()
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork()
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository<TEntity>.CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.CreateUnitOfWork
    name: CreateUnitOfWork
    nameWithType: UvendiaRepository(Of TEntity).CreateUnitOfWork
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).CreateUnitOfWork
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
  name: Save(TEntity)
  nameWithType: UvendiaRepository<TEntity>.Save(TEntity)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save(TEntity)
  nameWithType.vb: UvendiaRepository(Of TEntity).Save(TEntity)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save(TEntity)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository<TEntity>.Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.Save(`0)
    name: Save
    nameWithType: UvendiaRepository(Of TEntity).Save
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).Save
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  commentId: M:Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
  name: SetAuditInfo(Webshop, Webshop)
  nameWithType: UvendiaRepository<TEntity>.SetAuditInfo(Webshop, Webshop)
  fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  nameWithType.vb: UvendiaRepository(Of TEntity).SetAuditInfo(Webshop, Webshop)
  fullName.vb: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo(Uvendia.Domain.Webshop, Uvendia.Domain.Webshop)
  spec.csharp:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository<TEntity>.SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository<TEntity>.SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Uvendia.Domain.Repositories.UvendiaRepository`1.SetAuditInfo(Uvendia.Domain.Webshop,Uvendia.Domain.Webshop)
    name: SetAuditInfo
    nameWithType: UvendiaRepository(Of TEntity).SetAuditInfo
    fullName: Uvendia.Domain.Repositories.UvendiaRepository(Of TEntity).SetAuditInfo
  - name: (
    nameWithType: (
    fullName: (
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Uvendia.Domain.Webshop
    name: Webshop
    nameWithType: Webshop
    fullName: Uvendia.Domain.Webshop
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._syncLock
  name: _syncLock
  nameWithType: BaseRepository<TEntity>._syncLock
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._syncLock
  nameWithType.vb: BaseRepository(Of TEntity)._syncLock
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._syncLock
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._connectionStringName
  name: _connectionStringName
  nameWithType: BaseRepository<TEntity>._connectionStringName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._connectionStringName
  nameWithType.vb: BaseRepository(Of TEntity)._connectionStringName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._connectionStringName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableSchema
  name: _tableSchema
  nameWithType: BaseRepository<TEntity>._tableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableSchema
  nameWithType.vb: BaseRepository(Of TEntity)._tableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  commentId: F:Dazzling.Studio.SqlRepository.BaseRepository`1._tableName
  name: _tableName
  nameWithType: BaseRepository<TEntity>._tableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>._tableName
  nameWithType.vb: BaseRepository(Of TEntity)._tableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity)._tableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
  name: Instance<R>()
  nameWithType: BaseRepository<TEntity>.Instance<R>()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>()
  nameWithType.vb: BaseRepository(Of TEntity).Instance(Of R)()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)()
  name.vb: Instance(Of R)()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance<R>
    nameWithType: BaseRepository<TEntity>.Instance<R>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Instance<R>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Instance``1
    name: Instance(Of R)
    nameWithType: BaseRepository(Of TEntity).Instance(Of R)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Instance(Of R)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableSchema
  name: TableSchema
  nameWithType: BaseRepository<TEntity>.TableSchema
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableSchema
  nameWithType.vb: BaseRepository(Of TEntity).TableSchema
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableSchema
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  commentId: P:Dazzling.Studio.SqlRepository.BaseRepository`1.TableName
  name: TableName
  nameWithType: BaseRepository<TEntity>.TableName
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.TableName
  nameWithType.vb: BaseRepository(Of TEntity).TableName
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).TableName
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
  name: CreateConnection()
  nameWithType: BaseRepository<TEntity>.CreateConnection()
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection()
  nameWithType.vb: BaseRepository(Of TEntity).CreateConnection()
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection()
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository<TEntity>.CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.CreateConnection
    name: CreateConnection
    nameWithType: BaseRepository(Of TEntity).CreateConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).CreateConnection
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
  isExternal: true
  name: SetConnection(SqlConnection)
  nameWithType: BaseRepository<TEntity>.SetConnection(SqlConnection)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection(System.Data.SqlClient.SqlConnection)
  nameWithType.vb: BaseRepository(Of TEntity).SetConnection(SqlConnection)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection(System.Data.SqlClient.SqlConnection)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository<TEntity>.SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.SetConnection(System.Data.SqlClient.SqlConnection)
    name: SetConnection
    nameWithType: BaseRepository(Of TEntity).SetConnection
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).SetConnection
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Data.SqlClient.SqlConnection
    name: SqlConnection
    nameWithType: SqlConnection
    fullName: System.Data.SqlClient.SqlConnection
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
  name: Single<IID>(IID)
  nameWithType: BaseRepository<TEntity>.Single<IID>(IID)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>(IID)
  nameWithType.vb: BaseRepository(Of TEntity).Single(Of IID)(IID)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)(IID)
  name.vb: Single(Of IID)(IID)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single<IID>
    nameWithType: BaseRepository<TEntity>.Single<IID>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single<IID>
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single``1(``0)
    name: Single(Of IID)
    nameWithType: BaseRepository(Of TEntity).Single(Of IID)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(Of IID)
  - name: (
    nameWithType: (
    fullName: (
  - name: IID
    nameWithType: IID
    fullName: IID
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
  isExternal: true
  name: Single(String, Object)
  nameWithType: BaseRepository<TEntity>.Single(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Single(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository<TEntity>.Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Single(System.String,System.Object)
    name: Single
    nameWithType: BaseRepository(Of TEntity).Single
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Single
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
  name: All<TType>(TType[])
  nameWithType: BaseRepository<TEntity>.All<TType>(TType[])
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>(TType[])
  nameWithType.vb: BaseRepository(Of TEntity).All(Of TType)(TType())
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)(TType())
  name.vb: All(Of TType)(TType())
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All<TType>
    nameWithType: BaseRepository<TEntity>.All<TType>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All<TType>
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All``1(``0[])
    name: All(Of TType)
    nameWithType: BaseRepository(Of TEntity).All(Of TType)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(Of TType)
  - name: (
    nameWithType: (
    fullName: (
  - name: TType
    nameWithType: TType
    fullName: TType
  - name: ()
    nameWithType: ()
    fullName: ()
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
  isExternal: true
  name: All(String, String, Int32, Object)
  nameWithType: BaseRepository<TEntity>.All(String, String, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All(System.String, System.String, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).All(String, String, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All(System.String, System.String, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository<TEntity>.All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.All(System.String,System.String,System.Int32,System.Object)
    name: All
    nameWithType: BaseRepository(Of TEntity).All
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).All
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
  isExternal: true
  name: Paged(Int32, String, String, Int32, Int32, Object)
  nameWithType: BaseRepository<TEntity>.Paged(Int32, String, String, Int32, Int32, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Paged(Int32, String, String, Int32, Int32, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged(System.Int32, System.String, System.String, System.Int32, System.Int32, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository<TEntity>.Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Paged(System.Int32@,System.String,System.String,System.Int32,System.Int32,System.Object)
    name: Paged
    nameWithType: BaseRepository(Of TEntity).Paged
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Paged
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
  name: Insert<Y>(TEntity)
  nameWithType: BaseRepository<TEntity>.Insert<Y>(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)(TEntity)
  name.vb: Insert(Of Y)(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert<Y>
    nameWithType: BaseRepository<TEntity>.Insert<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Insert<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Insert``1(`0)
    name: Insert(Of Y)
    nameWithType: BaseRepository(Of TEntity).Insert(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Insert(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
  name: Update(TEntity)
  nameWithType: BaseRepository<TEntity>.Update(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Update(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository<TEntity>.Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Update(`0)
    name: Update
    nameWithType: BaseRepository(Of TEntity).Update
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
  name: Delete(TEntity)
  nameWithType: BaseRepository<TEntity>.Delete(TEntity)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete(TEntity)
  nameWithType.vb: BaseRepository(Of TEntity).Delete(TEntity)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete(TEntity)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository<TEntity>.Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Delete(`0)
    name: Delete
    nameWithType: BaseRepository(Of TEntity).Delete
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Delete
  - name: (
    nameWithType: (
    fullName: (
  - name: TEntity
    nameWithType: TEntity
    fullName: TEntity
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
  name: DeleteById<Y>(Y)
  nameWithType: BaseRepository<TEntity>.DeleteById<Y>(Y)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>(Y)
  nameWithType.vb: BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)(Y)
  name.vb: DeleteById(Of Y)(Y)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById<Y>
    nameWithType: BaseRepository<TEntity>.DeleteById<Y>
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.DeleteById<Y>
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.DeleteById``1(``0)
    name: DeleteById(Of Y)
    nameWithType: BaseRepository(Of TEntity).DeleteById(Of Y)
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).DeleteById(Of Y)
  - name: (
    nameWithType: (
    fullName: (
  - name: Y
    nameWithType: Y
    fullName: Y
  - name: )
    nameWithType: )
    fullName: )
- uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  commentId: M:Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
  isExternal: true
  name: Count(String, Object)
  nameWithType: BaseRepository<TEntity>.Count(String, Object)
  fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count(System.String, System.Object)
  nameWithType.vb: BaseRepository(Of TEntity).Count(String, Object)
  fullName.vb: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count(System.String, System.Object)
  spec.csharp:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository<TEntity>.Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository<TEntity>.Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Dazzling.Studio.SqlRepository.BaseRepository`1.Count(System.String,System.Object)
    name: Count
    nameWithType: BaseRepository(Of TEntity).Count
    fullName: Dazzling.Studio.SqlRepository.BaseRepository(Of TEntity).Count
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Uvendia.Domain.Repositories.Subscriptions.Save*
  commentId: Overload:Uvendia.Domain.Repositories.Subscriptions.Save
  name: Save
  nameWithType: Subscriptions.Save
  fullName: Uvendia.Domain.Repositories.Subscriptions.Save
- uid: Uvendia.Domain.Subscription[]
  isExternal: true
  name: Subscription[]
  nameWithType: Subscription[]
  fullName: Uvendia.Domain.Subscription[]
  nameWithType.vb: Subscription()
  fullName.vb: Uvendia.Domain.Subscription()
  name.vb: Subscription()
  spec.csharp:
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Uvendia.Domain.Subscription
    name: Subscription
    nameWithType: Subscription
    fullName: Uvendia.Domain.Subscription
  - name: ()
    nameWithType: ()
    fullName: ()
